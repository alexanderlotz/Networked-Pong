/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'java'
    id 'checkstyle'
    id 'eclipse'
    id 'idea'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

javafx {
    sdk = 'C:\\Program Files\\Java\\javafx-sdk-11.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

sourceSets {
    main {
        resources {
            includes = ["**/*.*"]
        }
    }
}

dependencies {
    // Use JUnit Jupiter API for testing.
    implementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    implementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

tasks.named('build') {
    dependsOn('idea', 'eclipse')
}

tasks.named('clean') {
    dependsOn('cleanIdea', 'cleanEclipse')
}

task runWithJavaExec(type: JavaExec) {
    doFirst {
        if (!project.hasProperty("args")) {
            throw new GradleException("A main class must be specified. Use -Pargs=<MainClassName>")
        }
    }
    dependsOn('build')
    group = 'Execution'
    description = 'Run the main class with JavaExecTask'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("args")) {
        main = project.property("args")
    }
}

task createJar(type: Jar) {
    archiveName = "JUnitReflectLib.jar"
    manifest {
        attributes 'Implementation-Title': 'Custom JUnit Library',  
            'Implementation-Version': '1.0'//,
            //'Main-Class': 'me.test.Test'
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

}

task copyJarToBin(type: Copy) {
    from createJar
    into "../jars"
}


tasks.named('assemble') {
    dependsOn('copyJarToBin')
}

task showReports {
    doLast {
        try {
            String fileDir = "file:///"+"$buildDir/reports/"
            if ((new File("$buildDir/reports/checkstyle/main.html")).exists()) {
                java.awt.Desktop.desktop.browse(((fileDir + "checkstyle/main.html").replace("\\", "/").replace(" ", "%20")).toURI())
            }
            if ((new File("$buildDir/reports/checkstyle/test.html")).exists()) {
                java.awt.Desktop.desktop.browse(((fileDir + "checkstyle/test.html").replace("\\", "/").replace(" ", "%20")).toURI())
            }
        } catch(URISyntaxException e) {
        }
    }
}